plugins{
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = '1.0.0'

jar {
    manifest {
        attributes 'Implementation-Title': 'TomEE Buildpack Resource Configuration',
                   'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.openejb', name: 'openejb-api', version: '4.7.2'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-cloudfoundry-connector', version: '1.2.0.RELEASE'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-core', version: '1.2.0.RELEASE'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

import com.github.jengelman.gradle.plugins.shadow.relocation.SimpleRelocator

shadowJar {
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/services/com.fasterxml.*'
    dependencies {
        exclude(dependency('org.apache.openejb:openejb-api:4.7.2'))
    }
    relocate 'org.springframework.cloud', 'org.cloudfoundry.reconfiguration.org.springframework.cloud'
    SimpleRelocator simpleRelocator = new SimpleRelocator('org.springframework.cloud', 'org.cloudfoundry.reconfiguration.org.springframework.cloud', null, null, true)
    relocate simpleRelocator
}

task relocateServices(type: Copy) {
    def zipFile = file("$buildDir/libs/${archivesBaseName}-${version}-all.jar")
    def outputDir = file("${buildDir}/tmp/jarContent")
    from zipTree(zipFile)
    into outputDir
    filesMatching('META-INF/services/org.cloudfoundry.reconfiguration.org.springframework.cloud*') {
        filter { String line -> line.replace('org.springframework.cloud', 'org.cloudfoundry.reconfiguration.org.springframework.cloud') }
    }
    doLast {
        delete zipFile
    }
}

task moveShadowJar(type: Jar) {
    def outputDir = file("${buildDir}/tmp/jarContent")
    from outputDir
    doLast {
        delete outputDir
    }
}

relocateServices.dependsOn shadowJar
moveShadowJar.dependsOn relocateServices
assemble.dependsOn moveShadowJar
